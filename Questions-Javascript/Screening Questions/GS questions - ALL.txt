1) 2nd smallest element of an unsorted array.

2) 2nd smallest element of a sorted rotated array. E.g. 5,6,1,2,3,4

3) Set of anagrams of list of words. The output should be words which are anagrams from the list should be grouped together.

4) Minimum distance between 2 words counting the number of characters from middle of both words. E.g. ABC is XYZ and ABC & XYZ are two distinct words. Minimum distance between ABC and XYZ

5) First unique character of a string. E.g. aabdcce . Output : d

6) Largest substring with unique characters e.g. aaabcbdeaf Output : cbdeaf

7) Print matrix in spiral form e.g. {{1,2,3},{4,5,6},{7,8,9}} Output . 1,2,3,6,9,8,7,4,5

8) Program to add two fractions

9) Largest palindrome in a given string

10) Return element from a Pascal Traingle - Given 5,2 as input return 2 nd element from 5th row

11) Given a String “aabbbbddcc” find the longest first repeating index and its length.  (Input: “aabbbbddcc”  Output: [2,4] 2 is the index and 4 is the length).

12) Arrange given numbers to form the biggest number.Input- List of numbers : {1, 34, 3, 98, 9, 76, 45, 4}   Output – 998764543431

13) Find out the number of pair from given integer array whose sum is equal to a given number.

14) Missing characters to make a string Pangram

15) Check if a number is a power of another number

16) Given Input,print the following input: “SSSSSTTPPQ”  Output: “5S2T2P1Q”.

17) Find the nth Number in fibonacci series using Iterative and Recursive Approach.

18) Given node in Binary Search tree, write the implementation for Put , Contains and InOrder methods.

19) Write a method for ATOI functionality (ASCII to Integer conversion)

20) Find if a given number is Armstrong number - Example: 371 = 3^3 + 7^3 + 1^3

21) Given a set of numbers identify pairs such that a^b = b^a

22) find number whether given no. is power of 10 or not. Example :- 100(10^2), 1000 (10^3), 0.1 (10^-1), 0.01(10^-2)

23) find the length of minimum sub Array exceeding sum. ex: input : array is {1,2,3,4} sum = 6, output:length 2 

24)  /* Problem Name is &&& Square Root &&& PLEASE DO NOT REMOVE THIS LINE. */
 
* Instructions to Candidate
* This is **NOT** a math problem. You are required to code up a simple mathematical technique to find the square root of a number.
* The Newton-Raphson method can be used to find the square root of a number N as follows
    ** Make an initial guess
    ** Update the guess using the below formula
    ** New Estimate = Current Estimate - ( F(Current Estimate) / F'(Current Estimate) ), where
     F(Current Estimate) = Current Estimate * Current Estimate - N
     F'(Current Estimate) = 2*Current Estimate
    ** Repeat till you are close enough
* Run this code in the REPL to observe its behaviour. The
   execution entry point is main().
* Consider adding some additional tests in doTestsPass()
*/

25) stair case problem

26) prime factorization example :- if no. is 12 prime factor [2,2,3], no. is prime factor [2,2,2]

27) Average grade problem  input [ ["sobby",87], ["arush", 37],["tony", 24],["charles",22]] , here best grade is 87 which is output

28) find dot product

29) optimal path

30) find most repeted ip in apache log  
example :-  input :{ "10.0.0.1-frank [10/dec/17 10:14:27]", "10.0.0.1-frank [10/dec/17 10:14:28]","10.0.0.2-nancy [10/dec/17 10:14:28]", "10.0.0.1-frank [10/dec/17 10:14:27]" };
	     output 10.0.0.1 ip which mostly repeted

31) walking robot  
/* Problem statement
 Given a robot which can only move in four directions, UP(U), DOWN(D), LEFT(L), RIGHT(R). Given a string consisting of instructions to move.
  Output the co-ordinates of robot after the executing the instructions. Initial position of robot is at origin(0, 0).

Examples:

Input : move = "UDDLRL" 
Output : (-1, -1)
Move U : (0, 0)--(0, 1)
Move D : (0, 1)--(0, 0)
Move D : (0, 0)--(0, -1)
Move L : (0, -1)--(-1, -1)
Move R : (-1, -1)--(0, -1)
Move L : (0, -1)--(-1, -1)

Therefore final position after the complete
movement is: (-1, -1)

Input : move = "UDDLLRUUUDUURUDDUULLDRRRR"
Output : (2, 3) 
 *  */
32) snow pack problem example :- input : int arr[] = {0, 1, 3, 0, 1, 2, 0,4, 2, 0, 3, 0}; output 13
To understand snowpack go through this geeks for geeks problem  https://www.geeksforgeeks.org/trapping-rain-water/

33) find unique tuples(substring) of given length  
 Example : input : "aab" find 2 length substring output : aa,ab
            input "abcd" find 2 length substring output : ab, bc,cd

34) find longest word in given dictionary
   example : dictionary is : {"to","toe","toes","doe","dog","god","dogs","book","banana"} and input String is "dsetog"
            output : toes, dogs

35) reverse LinkedList.

36) To find second largest number from un-sorted array.

 


